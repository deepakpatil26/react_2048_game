{"version":3,"sources":["utils/boardUtils.ts","constants/constants.ts","components/Tiles/Tile.tsx","components/Tiles/TilesList.tsx","components/Button/Button.tsx","components/Board/GameResult.tsx","components/Board/Board.tsx","components/Board/BoardProvider.tsx","components/Board/BoardContainer.tsx","hooks/useLocalStorage.ts","components/ScoreBox/ScoreBox.tsx","components/ScoresContainer/ScoresContainer.tsx","components/GameHeader/GameHeader.tsx","constants/regex.ts","components/GameFooter/GameFooter.tsx","utils/utils.ts","components/Game/Game.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["INDICES","areTilesEqual","t1","t2","_Object$keys","_Object$keys2","Object","keys","length","every","p","shiftHorizontally","line","direction","shift","v","positionY","position","shiftVertically","positionX","getColumn","setColumn","result","JSON","parse","stringify","sort","v1","v2","startPosition","i","reverse","value","j","generateBoard","tilesCount","arguments","undefined","tiles","createRandomTile","getCoordinates","Math","floor","random","coordinates","isExists","id","getNextId","type","some","x","getRow","row","filter","column","getMaxId","max","apply","map","MOVES_MAP","up","flat","down","right","left","ScreenSizeBreakpoint","TilesScreenTransformFactor","KEYBOARD_ARROW_TO_DIRECTION_MAP","ArrowUp","ArrowDown","ArrowRight","ArrowLeft","w","s","d","a","Tile","memo","props","_jsx","className","style","transform","y","children","TilesList","BoardTile","factor","TileContainer","setFactor","useState","calcFactor","useEffect","handleResize","window","addEventListener","removeEventListener","sortedTiles","innerWidth","Button","onClick","DATA","WIN","message","buttonText","containerClass","GAME_OVER","Result","isWin","onContinue","onRestart","playAfterWin","_jsxs","GameResultContainer","gameState","dispatch","useGameContext","status","_Fragment","handleRestart","handleContinue","BoardGrid","grid","Array","from","rowId","columns","colId","Board","GameResult","Tiles","BoardProvider","boardState","useReducer","boardReducer","initState","payload","moves","loading","setTimeout","state","action","lastMove","currGameState","nextGameState","slice","Error","startClientX","startClientY","BoardContainer","handleTouchStart","event","touches","startTouch","clientX","clientY","handleTouchEnd","endTouch","changedTouches","endClientX","endClientY","xDiff","yDiff","abs","boardContainer","document","getElementById","GAME_ID","useStateReducer","prevState","newState","useGameLocalStorage","key","defaultValue","reducer","getInitialValue","localStorage","getItem","error","console","log","setItem","ScoreBox","title","score","ScoresContainer","stateReducer","newPoints","oldAddScore","innerText","newAddScore","cloneNode","parentNode","replaceChild","bestScore","containsTile","tile","t","find","lastGeneratedTileId","reduce","acc","curr","GameTitle","GameDescription","href","GameHeader","_","REGEX_MAP","mobileDevice","mobileDeviceExtend","Section","bottomSeparator","GameRules","text","navigator","userAgent","vendor","test","substring","LearnMore","target","rel","GameFooter","GameContext","React","createContext","getGameStatus","tilesMap","tilesOnSamePosition","movePossible","arr1","arr2","getCoordinate","isGameOver","isGameWon","gameReducer","move","b1","b2","values","forEach","merge","shouldChangeStatus","areEqual","GameProvider","handleKeyPress","e","preventDefault","Provider","Game","context","useContext","App","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f087966a.chunk.js","sourcesContent":["import { Value, Tile, Direction } from \"../components/interfaces\";\r\n\r\nconst INDICES = [0, 1, 2, 3];\r\n\r\nexport const areEqual = (b1: Tile[], b2: Tile[]) => {\r\n  return b1.every((x) => b2.some((y) => areTilesEqual(x, y)));\r\n};\r\n\r\nexport const areTilesEqual = (t1: Tile, t2: Tile): boolean => {\r\n  return (\r\n    (t1 === null && t2 === null) ||\r\n    ((t1 && Object.keys(t1)?.length) === (t2 && Object.keys(t2)?.length) &&\r\n      Object.keys(t1).every((p) => t1[p] === t2[p]))\r\n  );\r\n};\r\n\r\nexport const isGameWon = (tiles: Tile[]) => {\r\n  return tiles.some((tile) => tile.value === 2048);\r\n};\r\n\r\nexport const isGameOver = (tiles: Tile[]) => {\r\n  const tilesOnSamePosition = (tiles: Tile[]) => {\r\n    const tilesMap = {};\r\n    for (let i = 0; i < tiles.length; i++) {\r\n      const key = `${tiles[i].positionX}${tiles[i].positionY}`;\r\n      if (tilesMap[key]) {\r\n        return true;\r\n      }\r\n      tilesMap[key] = true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  if (tiles.length < 16 || tilesOnSamePosition(tiles)) {\r\n    return false;\r\n  }\r\n\r\n  const movePossible = (\r\n    arr1: Tile[],\r\n    arr2: Tile[],\r\n    getCoordinate: (x: Tile) => number\r\n  ) => {\r\n    return arr1.some((x) =>\r\n      arr2.some(\r\n        (y) => getCoordinate(x) === getCoordinate(y) && x.value === y.value\r\n      )\r\n    );\r\n  };\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    if (\r\n      movePossible(\r\n        getRow(tiles, i),\r\n        getRow(tiles, i + 1),\r\n        (x: Tile) => x.positionY\r\n      ) ||\r\n      movePossible(\r\n        getColumn(tiles, i),\r\n        getColumn(tiles, i + 1),\r\n        (x: Tile) => x.positionX\r\n      )\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const merge = (tiles: Tile[]): Tile[] => {\r\n  let id = getNextId(tiles);\r\n  let values: { [key: string]: Tile } = {};\r\n\r\n  tiles.forEach((v) => {\r\n    const key = `${v.positionX}${v.positionY}`;\r\n    if (values[key]) {\r\n      const value = (v.value * 2) as Value;\r\n      values[key] = { ...v, id: id++, value, type: \"merged\" };\r\n    } else {\r\n      values[key] = v;\r\n    }\r\n  });\r\n\r\n  return Object.values(values);\r\n};\r\n\r\nexport const moveRight = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) =>\r\n    shiftHorizontally(getRow(tiles, i), \"right\")\r\n  ).flat();\r\n};\r\n\r\nexport const moveLeft = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) => shiftHorizontally(getRow(tiles, i), \"left\")).flat();\r\n};\r\n\r\nexport const moveUp = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) =>\r\n    shiftVertically(getColumn(tiles, i), \"left\")\r\n  ).flat();\r\n};\r\n\r\nexport const moveDown = (tiles: Tile[]): Tile[] => {\r\n  return INDICES.map((i) =>\r\n    shiftVertically(getColumn(tiles, i), \"right\")\r\n  ).flat();\r\n};\r\n\r\nconst shiftHorizontally = (line: Tile[], direction: Direction): Tile[] => {\r\n  return shift(\r\n    line,\r\n    (v: Tile) => v.positionY,\r\n    (v: Tile, position: number) => (v.positionY = position),\r\n    direction\r\n  );\r\n};\r\n\r\nconst shiftVertically = (line: Tile[], direction: Direction): Tile[] => {\r\n  return shift(\r\n    line,\r\n    (v: Tile) => v.positionX,\r\n    (v: Tile, position: number) => (v.positionX = position),\r\n    direction\r\n  );\r\n};\r\n\r\nconst shift = (\r\n  line: Tile[],\r\n  getColumn: (v: Tile) => number,\r\n  setColumn: (v: Tile, position: number) => void,\r\n  direction: Direction\r\n): Tile[] => {\r\n  if (line.length === 0) {\r\n    return [];\r\n  }\r\n  let result: Tile[] = JSON.parse(JSON.stringify(line));\r\n  result.sort((v1, v2) => getColumn(v1) - getColumn(v2));\r\n\r\n  const startPosition = direction === \"left\" ? 0 : 4 - result.length;\r\n  for (let i = 0; i < result.length; i++) {\r\n    setColumn(result[i], startPosition + i);\r\n  }\r\n\r\n  direction === \"left\" && result.reverse();\r\n  let i = result.length - 1;\r\n  while (i >= 1) {\r\n    if (result[i].value === result[i - 1].value && result[i].value !== 2048) {\r\n      for (let j = 0; j <= i - 1; j++) {\r\n        const shift = direction === \"right\" ? 1 : -1;\r\n        setColumn(result[j], getColumn(result[j]) + shift);\r\n      }\r\n      i -= 2;\r\n      continue;\r\n    }\r\n\r\n    i--;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport const generateBoard = (tilesCount: number = 2): Tile[] => {\r\n  let tiles = [];\r\n  while (tilesCount > 0) {\r\n    tiles = [...tiles, createRandomTile(tiles)];\r\n    tilesCount--;\r\n  }\r\n\r\n  return tiles;\r\n};\r\n\r\nexport const createRandomTile = (tiles: Tile[]): Tile => {\r\n  const getCoordinates = (position: number): [number, number] => {\r\n    const x = Math.floor(position / 4);\r\n    const y = position % 4;\r\n    return [x, y];\r\n  };\r\n\r\n  Math.floor(Math.random() * 16);\r\n\r\n  let position = Math.floor(Math.random() * 16);\r\n  let coordinates = getCoordinates(position);\r\n  while (isExists(tiles, ...coordinates)) {\r\n    position = position === 15 ? 0 : position + 1;\r\n    coordinates = getCoordinates(position);\r\n  }\r\n\r\n  const value: Value = Math.random() <= 0.2 ? 4 : 2;\r\n\r\n  return {\r\n    id: getNextId(tiles),\r\n    value,\r\n    type: \"new\",\r\n    positionX: coordinates[0],\r\n    positionY: coordinates[1],\r\n  };\r\n};\r\n\r\nconst isExists = (\r\n  tiles: Tile[],\r\n  positionX: number,\r\n  positionY: number\r\n): boolean => {\r\n  return tiles.some(\r\n    (x) => x.positionX === positionX && x.positionY === positionY\r\n  );\r\n};\r\n\r\nexport const getRow = (tiles: Tile[], row: number): Array<Tile> =>\r\n  tiles.filter((x) => x.positionX === row);\r\n\r\nexport const getColumn = (tiles: Tile[], column: number): Array<Tile> =>\r\n  tiles.filter((x) => x.positionY === column);\r\n\r\nexport const getNextId = (tiles: Tile[]): number => {\r\n  return getMaxId(tiles) + 1;\r\n};\r\n\r\n// Returns the maximum id of the given tiles.\r\nexport const getMaxId = (tiles: Tile[]): number => {\r\n  return Math.max.apply(Math, [0, ...tiles.map((x) => x.id)]);\r\n};\r\n\r\nexport const MOVES_MAP: { [key: string]: Function } = {\r\n  up: moveUp,\r\n  down: moveDown,\r\n  right: moveRight,\r\n  left: moveLeft,\r\n};\r\n","import { Direction, TransformFactor } from \"../components/interfaces\";\r\n\r\n/*\r\nSize XS screen: Up to 420 pixels\r\nSize S screen: Between 421 pixels and 520 pixels\r\n*/\r\nexport const ScreenSizeBreakpoint = {\r\n  XS: 420,\r\n  S: 520,\r\n};\r\n\r\n/*\r\nTiles XS Translation Factor: translates with factor 72.6\r\nTiles S Translation Factor: translates with factor 96.8\r\nTiles M Translation Factor: translates with factor 121\r\n*/\r\nexport const TilesScreenTransformFactor: { [key: string]: TransformFactor } = {\r\n  XS: 73,\r\n  S: 97,\r\n  M: 121,\r\n};\r\n\r\nexport const KEYBOARD_ARROW_TO_DIRECTION_MAP: { [key: string]: Direction } = {\r\n  ArrowUp: \"up\",\r\n  ArrowDown: \"down\",\r\n  ArrowRight: \"right\",\r\n  ArrowLeft: \"left\",\r\n  w: \"up\",\r\n  s: \"down\",\r\n  d: \"right\",\r\n  a: \"left\",\r\n};\r\n","import React, { memo } from \"react\";\r\nimport { TileType, Value } from \"../interfaces\";\r\n\r\nimport \"./Tile.scss\";\r\n\r\ninterface TileProps {\r\n  value: Value;\r\n  type: TileType;\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nconst Tile = memo((props: TileProps) => {\r\n  return (\r\n    <div\r\n      className={`tile tile-${props.value}`}\r\n      style={{ transform: `translate(${props.x}px, ${props.y}px)` }}\r\n    >\r\n      <div className={`tileInner ${props.type}`}>{props.value}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Tile;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ScreenSizeBreakpoint,\r\n  TilesScreenTransformFactor,\r\n} from \"../../constants/constants\";\r\nimport { Tile, TransformFactor } from \"../interfaces\";\r\nimport { default as BoardTile } from \"./Tile\";\r\n\r\nimport \"./TilesList.scss\";\r\n\r\nconst TilesList = (props: { tiles: Tile[]; factor: number }) => {\r\n  return (\r\n    <div>\r\n      {props.tiles.map((x) => (\r\n        <BoardTile\r\n          key={x.id}\r\n          value={x.value}\r\n          type={x.type}\r\n          x={x.positionY * props.factor}\r\n          y={x.positionX * props.factor}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const TileContainer = (props: { tiles: Tile[] }) => {\r\n  const [factor, setFactor] = useState<TransformFactor>(calcFactor());\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setFactor(calcFactor());\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  const sortedTiles = props.tiles.sort((t1, t2) => t1.id - t2.id);\r\n  return (\r\n    <div className=\"tileContainer\">\r\n      <TilesList tiles={sortedTiles} factor={factor} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst calcFactor = () => {\r\n  if (window.innerWidth <= ScreenSizeBreakpoint.XS) {\r\n    return TilesScreenTransformFactor.XS;\r\n  }\r\n  if (window.innerWidth <= ScreenSizeBreakpoint.S) {\r\n    return TilesScreenTransformFactor.S;\r\n  }\r\n\r\n  return TilesScreenTransformFactor.M;\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./Button.scss\";\r\n\r\ninterface ButtonProps {\r\n  id?: string;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n}\r\n\r\nexport const Button = (props: ButtonProps) => {\r\n  const { id, children, className, onClick } = props;\r\n\r\n  return (\r\n    <button\r\n      id={id}\r\n      className={`appButton ${className || \"\"}`}\r\n      onClick={onClick}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Button from \"../Button\";\r\nimport { useGameContext } from \"../Game\";\r\nimport { GameStatus, Tile } from \"../interfaces\";\r\n\r\nconst DATA = {\r\n  WIN: {\r\n    message: \"Congratulations! You Win!\",\r\n    buttonText: \"Play again\",\r\n    containerClass: \"gameResultWin\",\r\n  },\r\n  GAME_OVER: {\r\n    message: \"Game Over!\",\r\n    buttonText: \"Try again\",\r\n    containerClass: \"gameResultLose\",\r\n  },\r\n};\r\n\r\nconst Result = (props: {\r\n  isWin: boolean;\r\n  onContinue: () => void;\r\n  onRestart: () => void;\r\n  playAfterWin: boolean;\r\n  status: GameStatus;\r\n}) => {\r\n  const { isWin, onContinue, onRestart, playAfterWin } = props;\r\n  const { message, buttonText, containerClass } =\r\n    isWin || playAfterWin ? DATA.WIN : DATA.GAME_OVER;\r\n\r\n  return (\r\n    <div className={`gameResult ${containerClass}`}>\r\n      <p>{message}</p>\r\n      <div>\r\n        {isWin && (\r\n          <Button className=\"continueButton\" onClick={() => onContinue()}>\r\n            Continue\r\n          </Button>\r\n        )}\r\n        <Button onClick={() => onRestart()}>{buttonText}</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst GameResultContainer = (props: { tiles: Tile[] }) => {\r\n  const { gameState, dispatch } = useGameContext();\r\n\r\n  const { status } = gameState;\r\n\r\n  const handleContinue = () => {\r\n    dispatch({ type: \"continue\" });\r\n  };\r\n\r\n  const handleRestart = () => {\r\n    dispatch({ type: \"restart\" });\r\n  };\r\n\r\n  const playAfterWin = props.tiles.some((x) => x.value === 2048);\r\n  return (\r\n    <>\r\n      {status !== \"IN_PROGRESS\" && status !== \"PLAY_AFTER_WIN\" && (\r\n        <Result\r\n          isWin={status === \"WIN\"}\r\n          playAfterWin={playAfterWin}\r\n          onRestart={handleRestart}\r\n          onContinue={handleContinue}\r\n          status={status}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GameResultContainer;\r\n","import React from \"react\";\r\nimport { Tile } from \"../interfaces\";\r\nimport Tiles from \"../Tiles\";\r\nimport GameResult from \"./GameResult\";\r\n\r\nconst BoardGrid = () => {\r\n  const grid = Array.from(Array(4).keys()).map((rowId) => {\r\n    const columns = Array.from(Array(4).keys()).map((colId) => (\r\n      <div key={colId} className=\"cell\"></div>\r\n    ));\r\n    return (\r\n      <div key={rowId} className=\"row\">\r\n        {columns}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return <div className=\"gridContainer\">{grid}</div>;\r\n};\r\n\r\nconst Board = (props: { tiles: Tile[] }) => {\r\n  return (\r\n    <div id=\"boardContainer\">\r\n      <GameResult tiles={props.tiles} />\r\n      <BoardGrid />\r\n      <Tiles tiles={props.tiles} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React, { useEffect, useReducer } from \"react\";\r\nimport { MOVES_MAP } from \"../../utils/boardUtils\";\r\nimport { useGameContext } from \"../Game/Game\";\r\nimport { GameState } from \"../interfaces\";\r\nimport Board from \"./Board\";\r\n\r\nimport \"./Board.scss\";\r\nimport { BoardActionType, BoardState } from \"./Interfaces\";\r\n\r\nexport const BoardProvider = () => {\r\n  const { gameState } = useGameContext();\r\n\r\n  const [boardState, dispatch] = useReducer(boardReducer, initState());\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: \"addMove\", payload: gameState });\r\n  }, [gameState]);\r\n\r\n  useEffect(() => {\r\n    if (boardState.moves.length < 2 || boardState.loading) {\r\n      return;\r\n    }\r\n\r\n    dispatch({ type: \"startMove\" });\r\n\r\n    setTimeout(() => {\r\n      dispatch({\r\n        type: \"endMove\",\r\n      });\r\n    }, 100);\r\n  }, [boardState]);\r\n\r\n  return <Board tiles={boardState.tiles} />;\r\n};\r\n\r\nfunction boardReducer(state: BoardState, action: BoardActionType): BoardState {\r\n  switch (action.type) {\r\n    case \"addMove\": {\r\n      const isNewGame = !action.payload.lastMove;\r\n      if (isNewGame || state.tiles.length === 0) {\r\n        return initState(action.payload);\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        moves: [...state.moves, action.payload],\r\n      };\r\n    }\r\n    case \"startMove\": {\r\n      const currGameState = state.moves[0];\r\n      const nextGameState = state.moves[1];\r\n      const tiles = MOVES_MAP[nextGameState.lastMove](currGameState.tiles);\r\n\r\n      return { ...state, loading: true, tiles };\r\n    }\r\n    case \"endMove\": {\r\n      const nextGameState = state.moves[1];\r\n      return {\r\n        moves: state.moves.slice(1),\r\n        loading: false,\r\n        tiles: nextGameState.tiles,\r\n      };\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action: ${action}`);\r\n    }\r\n  }\r\n}\r\n\r\nconst initState = (gameState?: GameState): BoardState => {\r\n  if (gameState) {\r\n    return { moves: [gameState], loading: false, tiles: gameState.tiles };\r\n  }\r\n  return { moves: [], loading: false, tiles: [] };\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useGameContext } from \"../Game\";\r\nimport { BoardProvider } from \"./BoardProvider\";\r\n\r\nlet startClientX = null;\r\nlet startClientY = null;\r\n\r\nexport const BoardContainer = () => {\r\n  const { dispatch } = useGameContext();\r\n\r\n  useEffect(() => {\r\n    function handleTouchStart(event) {\r\n      if (event.touches.length === 1) {\r\n        const startTouch = event.touches[0];\r\n        startClientX = startTouch.clientX;\r\n        startClientY = startTouch.clientY;\r\n      }\r\n    }\r\n\r\n    function handleTouchEnd(event) {\r\n      if (!startClientX || !startClientY || event.touches.length > 0) {\r\n        return;\r\n      }\r\n\r\n      const endTouch = event.changedTouches[0];\r\n      var endClientX = endTouch.clientX;\r\n      var endClientY = endTouch.clientY;\r\n\r\n      var xDiff = startClientX - endClientX;\r\n      var yDiff = startClientY - endClientY;\r\n\r\n      if (Math.abs(xDiff) > Math.abs(yDiff)) {\r\n        if (xDiff < 0) {\r\n          /* right swipe */\r\n          dispatch({ type: \"move\", payload: \"right\" });\r\n        } else {\r\n          /* left swipe */\r\n          dispatch({ type: \"move\", payload: \"left\" });\r\n        }\r\n      } else {\r\n        if (yDiff < 0) {\r\n          /* down swipe */\r\n          dispatch({ type: \"move\", payload: \"down\" });\r\n        } else {\r\n          /* up swipe */\r\n          dispatch({ type: \"move\", payload: \"up\" });\r\n        }\r\n      }\r\n      /* reset values */\r\n      startClientX = null;\r\n      startClientY = null;\r\n    }\r\n\r\n    const boardContainer = document.getElementById(\"boardContainer\");\r\n    boardContainer.addEventListener(\"touchstart\", handleTouchStart);\r\n    boardContainer.addEventListener(\"touchend\", handleTouchEnd);\r\n\r\n    return () => {\r\n      boardContainer.removeEventListener(\"touchstart\", handleTouchStart);\r\n      boardContainer.removeEventListener(\"touchend\", handleTouchEnd);\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return <BoardProvider />;\r\n};\r\n","import React, { useEffect, useReducer } from \"react\";\r\n\r\nconst GAME_ID = \"2048game\";\r\n\r\nconst useStateReducer = (prevState, newState) => {\r\n  return typeof newState === \"function\" ? newState(prevState) : newState;\r\n};\r\n\r\nconst getInitialValue = (key: string, defaultValue: any) => {\r\n  try {\r\n    const gameState = JSON.parse(window.localStorage.getItem(GAME_ID));\r\n    const value = gameState?.[key];\r\n    return value ?? defaultValue;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return defaultValue;\r\n  }\r\n};\r\n\r\nfunction useGameLocalStorage<T>(\r\n  key: string,\r\n  defaultValue: T,\r\n  reducer = useStateReducer\r\n): [T, React.Dispatch<any>] {\r\n  const [value, dispatch] = useReducer(\r\n    reducer,\r\n    getInitialValue(key, defaultValue)\r\n  );\r\n\r\n  useEffect(() => {\r\n    let state = JSON.parse(window.localStorage.getItem(GAME_ID)) || {};\r\n    state[key] = value;\r\n    window.localStorage.setItem(GAME_ID, JSON.stringify(state));\r\n  }, [value, key]);\r\n\r\n  return [value, dispatch];\r\n}\r\n\r\nexport default useGameLocalStorage;\r\n","import React from \"react\";\r\n\r\nimport \"./ScoreBox.scss\";\r\n\r\ninterface ScoreBoxProps {\r\n  title: string;\r\n  score: number;\r\n}\r\n\r\nexport const ScoreBox = (props: ScoreBoxProps) => {\r\n  return (\r\n    <div className=\"scoreBox\">\r\n      <span className=\"title\">{props.title}</span>\r\n      <span className=\"score\">{props.score}</span>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport useGameLocalStorage from \"../../hooks/useLocalStorage\";\r\nimport { getMaxId } from \"../../utils/boardUtils\";\r\nimport { useGameContext } from \"../Game/Game\";\r\nimport { Tile } from \"../interfaces\";\r\nimport ScoreBox from \"../ScoreBox\";\r\nimport { ACTIONTYPE, ScoresState } from \"./Interfaces\";\r\n\r\nimport \"./ScoresContainer.scss\";\r\n\r\nexport const ScoresContainer = () => {\r\n  const { gameState } = useGameContext();\r\n\r\n  const [state, dispatch] = useGameLocalStorage(\r\n    \"scores\",\r\n    initState(),\r\n    stateReducer\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: \"change\", payload: gameState.tiles });\r\n  }, [gameState.tiles, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (state.newPoints > 0) {\r\n      const oldAddScore = document.getElementById(\"additionScore\");\r\n      oldAddScore.innerText = `+${state.newPoints}`;\r\n      const newAddScore = oldAddScore.cloneNode(true);\r\n      oldAddScore.parentNode.replaceChild(newAddScore, oldAddScore);\r\n    }\r\n  }, [state]);\r\n\r\n  return (\r\n    <div className=\"scoresContainer\">\r\n      <div style={{ position: \"relative\" }}>\r\n        <ScoreBox title=\"SCORE\" score={state.score} />\r\n        <div className=\"addScore\" id=\"additionScore\"></div>\r\n      </div>\r\n\r\n      <ScoreBox title=\"BEST\" score={state.bestScore} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst initState = (tiles: Tile[] = []): ScoresState => {\r\n  return {\r\n    score: 0,\r\n    newPoints: 0,\r\n    bestScore: 0,\r\n    tiles,\r\n  };\r\n};\r\n\r\nconst containsTile = (tiles: Tile[], tile: Tile): boolean => {\r\n  return tiles.some((t) => t.id === tile.id);\r\n};\r\n\r\nconst stateReducer = (state: ScoresState, action: ACTIONTYPE) => {\r\n  switch (action.type) {\r\n    case \"change\": {\r\n      const tiles = action.payload;\r\n\r\n      // handles page refresh\r\n      if (\r\n        state.tiles.length === tiles.length &&\r\n        state.tiles.every((t) => containsTile(tiles, t))\r\n      ) {\r\n        return state;\r\n      }\r\n\r\n      // handles restart\r\n      if (\r\n        tiles.length === 2 &&\r\n        [1, 2].every((id) => tiles.find((tile) => tile.id === id)) &&\r\n        !state.tiles.every((t) => containsTile(tiles, t))\r\n      ) {\r\n        return { ...initState(tiles), bestScore: state.bestScore };\r\n      }\r\n\r\n      // handles add new tile\r\n      if (\r\n        state.tiles.every((t) => containsTile(tiles, t)) &&\r\n        tiles.length === state.tiles.length + 1\r\n      ) {\r\n        return { ...state, tiles: tiles, newPoints: 0 };\r\n      }\r\n\r\n      // handles merge\r\n      const lastGeneratedTileId = getMaxId(tiles);\r\n      const newPoints = tiles.reduce((acc: number, curr: Tile) => {\r\n        const add =\r\n          curr.id === lastGeneratedTileId || containsTile(state.tiles, curr)\r\n            ? 0\r\n            : curr.value;\r\n        return acc + add;\r\n      }, 0);\r\n\r\n      const score = state.score + newPoints;\r\n      const bestScore = Math.max(score, state.bestScore);\r\n\r\n      return { tiles, newPoints, score, bestScore };\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action type: ${action.type}`);\r\n    }\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport Button from \"../Button\";\r\nimport { useGameContext } from \"../Game\";\r\nimport ScoresContainer from \"../ScoresContainer\";\r\n\r\nimport \"./GameHeader.scss\";\r\n\r\nconst GameTitle = () => <span className=\"gameTitle\">2048</span>;\r\n\r\nconst GameDescription = () => {\r\n  return (\r\n    <div>\r\n      <span>\r\n        Join the numbers to get <b>2048</b>!\r\n      </span>\r\n      <br />\r\n      <a href=\"#howToPlaySection\">How to play →</a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const GameHeader = () => {\r\n  const { dispatch } = useGameContext();\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"gameIntro\">\r\n        <GameTitle />\r\n        <GameDescription />\r\n      </div>\r\n      <div className=\"actions\">\r\n        <ScoresContainer />\r\n        <Button\r\n          id=\"restartGameBtn\"\r\n          onClick={(_) => dispatch({ type: \"restart\" })}\r\n        >\r\n          New Game\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","export const REGEX_MAP = {\r\n  mobileDevice:\r\n    /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,\r\n  mobileDeviceExtend:\r\n    /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i,\r\n};\r\n","import React from \"react\";\r\nimport { isMobile } from \"../../utils/utils\";\r\nimport { SectionProps } from \"./Interfaces\";\r\n\r\nconst Section = (props: SectionProps) => {\r\n  return (\r\n    <div id={props.id}>\r\n      <h4>{props.title}</h4>\r\n      {props.children}\r\n      {props.bottomSeparator ? <hr /> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst GameRules = () => {\r\n  const text = isMobile(navigator.userAgent || navigator.vendor)\r\n    ? \"Swipe with your fingers to move the numbers.\"\r\n    : \"Use your arrow keys to move the numbers.\";\r\n\r\n  return (\r\n    <Section id=\"howToPlaySection\" title=\"HOW TO PLAY\" bottomSeparator>\r\n      <p>\r\n        {text} The same numbers will be merged into one when they touch. After\r\n        each move, a new number (<strong>2</strong> or <strong>4</strong>) is\r\n        generated at a random empty position. Merge the numbers and build a 2048\r\n        number to <strong>WIN</strong> the game!\r\n      </p>\r\n    </Section>\r\n  );\r\n};\r\n\r\nconst LearnMore = () => {\r\n  return (\r\n    <Section title=\"LEARN MORE\">\r\n      <p>\r\n        This app is inspired by{\" \"}\r\n        <a href=\"https://play2048.co/\">https://play2048.co/</a>. If you want to\r\n        learn more about the project tech stack or see the code, visit the&nbsp;\r\n        <a\r\n          href=\"https://github.com/deepakpatil26/react_2048_game\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >\r\n          Github repository\r\n        </a>\r\n        .\r\n      </p>\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport const GameFooter = () => {\r\n  return (\r\n    <div>\r\n      <GameRules />\r\n      <LearnMore />\r\n    </div>\r\n  );\r\n};\r\n","import { REGEX_MAP } from \"../constants/regex\";\r\n\r\nexport const isMobile = (value: string) => {\r\n  return (\r\n    REGEX_MAP.mobileDevice.test(value) ||\r\n    REGEX_MAP.mobileDeviceExtend.test(value.substring(0, 4))\r\n  );\r\n};\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport Board from \"../Board\";\r\n\r\nimport \"./Game.scss\";\r\nimport {\r\n  areEqual,\r\n  createRandomTile,\r\n  generateBoard,\r\n  isGameOver,\r\n  isGameWon,\r\n  merge,\r\n  MOVES_MAP,\r\n} from \"../../utils/boardUtils\";\r\nimport GameHeader from \"../GameHeader\";\r\nimport {\r\n  GameContextActionType,\r\n  GameState,\r\n  IGameContext,\r\n  Direction,\r\n  Tile,\r\n  GameStatus,\r\n} from \"../interfaces\";\r\nimport GameFooter from \"../GameFooter\";\r\nimport useGameLocalStorage from \"../../hooks/useLocalStorage\";\r\nimport { KEYBOARD_ARROW_TO_DIRECTION_MAP } from \"../../constants/constants\";\r\n\r\nconst GameContext = React.createContext<IGameContext>(null);\r\n\r\nconst getGameStatus = (tiles: Tile[]): GameStatus => {\r\n  if (isGameOver(tiles)) {\r\n    return \"GAME_OVER\";\r\n  }\r\n\r\n  if (isGameWon(tiles)) {\r\n    return \"WIN\";\r\n  }\r\n\r\n  return \"IN_PROGRESS\";\r\n};\r\n\r\nconst initState = (tilesCount = 2): GameState => {\r\n  return {\r\n    tiles: generateBoard(tilesCount),\r\n    lastMove: null,\r\n    status: \"IN_PROGRESS\",\r\n  };\r\n};\r\n\r\nfunction gameReducer(state: GameState, action: GameContextActionType) {\r\n  switch (action.type) {\r\n    case \"restart\": {\r\n      return initState();\r\n    }\r\n    case \"continue\": {\r\n      return { ...state, status: \"PLAY_AFTER_WIN\" };\r\n    }\r\n    case \"move\": {\r\n      const move = MOVES_MAP[action.payload];\r\n      let tiles: Tile[] = move(state.tiles);\r\n      if (areEqual(state.tiles, tiles)) {\r\n        return state;\r\n      }\r\n\r\n      tiles = merge(tiles);\r\n      tiles = [...tiles, createRandomTile(tiles)];\r\n      const status = getGameStatus(tiles);\r\n      const shouldChangeStatus =\r\n        state.status !== \"PLAY_AFTER_WIN\" || status === \"GAME_OVER\";\r\n\r\n      return {\r\n        tiles,\r\n        lastMove: action.payload,\r\n        status: shouldChangeStatus ? status : state.status,\r\n      };\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action: ${action}`);\r\n    }\r\n  }\r\n}\r\n\r\nconst GameProvider = (props) => {\r\n  const [state, dispatch] = useGameLocalStorage<GameState>(\r\n    \"game\",\r\n    initState(),\r\n    gameReducer\r\n  );\r\n\r\n  useEffect(() => {\r\n    const handleKeyPress = (e: KeyboardEvent) => {\r\n      e.preventDefault();\r\n      const direction: Direction | undefined =\r\n        KEYBOARD_ARROW_TO_DIRECTION_MAP[e.key];\r\n      if (direction) {\r\n        dispatch({ type: \"move\", payload: direction });\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", handleKeyPress);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKeyPress);\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <GameContext.Provider value={{ gameState: state, dispatch }}>\r\n      {props.children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n\r\nconst Game = () => {\r\n  return (\r\n    <GameProvider>\r\n      <div className=\"container\">\r\n        <div className=\"gameContainer\">\r\n          <GameHeader />\r\n          <Board />\r\n        </div>\r\n        <GameFooter />\r\n      </div>\r\n    </GameProvider>\r\n  );\r\n};\r\n\r\nfunction useGameContext() {\r\n  const context = useContext(GameContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useGameContext must be used within a GameContextProvider\");\r\n  }\r\n  return context;\r\n}\r\n\r\nexport { Game, useGameContext };\r\n","import React from \"react\";\r\nimport Game from \"../Game\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <main>\r\n        <Game />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./components/App/App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}